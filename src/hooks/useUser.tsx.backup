"use client";
import { createContext, useContext, useEffect, useState } from "react";

interface User {
  uid: string;
  displayName: string;
  email: string;
  photoUrl?: string;
  plan: "admin" | "pro" | "free";
  role: "admin" | "user";
  status: "active" | "inactive";
  createdAt: string;
  signType: "google" | "email";
}

interface UserContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  updateUser: (userData: Partial<User>) => void;
  logout: () => void;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export function UserProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Sample user data - replace with actual database call
  useEffect(() => {
    // Simulate loading from database
    const loadUser = async () => {
      try {
        setLoading(true);

        // This would be your actual database call
        // For now, using the sample data you provided
        const userData: User = {
          uid: "hfTVUMfZv5Uxi9gyWpkTTRwB1Uv1",
          displayName: "Irvan Shandika",
          email: "shandikamuhammadirvan@gmail.com",
          photoUrl: "https://firebasestorage.googleapis.com/v0/b/ishort-url.appspot.com/o/profileImages%2FhfTVUMfZv5Uxi9gyWpkTTRwB1Uv1?alt=media&token=3ad61711-6736-4702-a6fb-29119ce43f7c",
          plan: "admin",
          role: "admin",
          status: "active",
          createdAt: "13-07-2025",
          signType: "google",
        };

        setUser(userData);
        setError(null);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Failed to load user data");
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    loadUser();
  }, []);

  const updateUser = (userData: Partial<User>) => {
    if (user) {
      setUser({ ...user, ...userData });
    }
  };

  const logout = () => {
    setUser(null);
    setError(null);
    // Add logout logic here (clear session, redirect, etc.)
  };

  return <UserContext.Provider value={{ user, loading, error, updateUser, logout }}>{children}</UserContext.Provider>;
}

export function useUser() {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error("useUser must be used within a UserProvider");
  }
  return context;
}

// Hook to get URL count for the current user
export function useUserUrlCount() {
  const { user } = useUser();
  const [urlCount, setUrlCount] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      const fetchUrlCount = async () => {
        setLoading(true);
        try {
          const response = await fetch("/api/analytics");
          if (response.ok) {
            const data = await response.json();
            setUrlCount(data.urlCount || 0);
          } else {
            console.error("Failed to fetch URL count:", response.statusText);
            setUrlCount(0);
          }
        } catch (error) {
          console.error("Failed to fetch URL count:", error);
          setUrlCount(0);
        } finally {
          setLoading(false);
        }
      };

      fetchUrlCount();
    } else {
      setUrlCount(0);
      setLoading(false);
    }
  }, [user]);

  return { urlCount, loading };
}

// Define URL type
interface UrlData {
  id: string;
  title: string;
  originalUrl: string;
  shortUrl: string;
  clicks: number;
  isPasswordProtected: boolean;
  createdAt: Date;
  lastClicked: Date | null;
  hashedPassword?: string | null;
}

// Hook to get analytics data for the current user
export function useAnalytics() {
  const { user } = useUser();
  const [analytics, setAnalytics] = useState({
    totalUrls: 0,
    totalClicks: 0,
    todayClicks: 0,
    trend: "stable" as "up" | "down" | "stable",
    clickHistory: [] as { date: string; clicks: number }[],
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      const fetchAnalytics = async () => {
        setLoading(true);
        try {
          const response = await fetch("/api/analytics");
          if (response.ok) {
            const data = await response.json();
            setAnalytics({
              totalUrls: data.totalUrls || 0,
              totalClicks: data.totalClicks || 0,
              todayClicks: data.todayClicks || 0,
              trend: data.trend || "stable",
              clickHistory: data.clickHistory || [],
            });
          } else {
            console.error("Failed to fetch analytics:", response.statusText);
            // Keep default values
          }
        } catch (error) {
          console.error("Failed to fetch analytics:", error);
          // Keep default values
        } finally {
          setLoading(false);
        }
      };

      fetchAnalytics();
    } else {
      setLoading(false);
    }
  }, [user]);

  return { analytics, loading };
}

// Hook to get URLs for the current user
export function useUrls() {
  const { user } = useUser();
  const [urls, setUrls] = useState<UrlData[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      const fetchUrls = async () => {
        setLoading(true);
        try {
          const response = await fetch("/api/urls");
          if (response.ok) {
            const data = await response.json();
            setUrls(data);
          } else {
            console.error("Failed to fetch URLs:", response.statusText);
            setUrls([]);
          }
        } catch (error) {
          console.error("Failed to fetch URLs:", error);
          setUrls([]);
        } finally {
          setLoading(false);
        }
      };

      fetchUrls();
    } else {
      setUrls([]);
      setLoading(false);
    }
  }, [user]);

  const createUrl = async (urlData: Omit<UrlData, "id" | "createdAt" | "lastClicked" | "clicks" | "shortUrl">) => {
    try {
      const response = await fetch("/api/urls", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(urlData),
      });

      if (response.ok) {
        const newUrl = await response.json();
        setUrls((prev) => [newUrl, ...prev]);
        return newUrl;
      } else {
        throw new Error("Failed to create URL");
      }
    } catch (error) {
      console.error("Error creating URL:", error);
      throw error;
    }
  };

  const updateUrl = async (id: string, urlData: Partial<UrlData>) => {
    try {
      const response = await fetch("/api/urls", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ id, ...urlData }),
      });

      if (response.ok) {
        setUrls((prev) => prev.map((url: UrlData) => (url.id === id ? { ...url, ...urlData } : url)));
      } else {
        throw new Error("Failed to update URL");
      }
    } catch (error) {
      console.error("Error updating URL:", error);
      throw error;
    }
  };

  const deleteUrl = async (id: string) => {
    try {
      const response = await fetch(`/api/urls?id=${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setUrls((prev) => prev.filter((url: UrlData) => url.id !== id));
      } else {
        throw new Error("Failed to delete URL");
      }
    } catch (error) {
      console.error("Error deleting URL:", error);
      throw error;
    }
  };

  return { urls, loading, createUrl, updateUrl, deleteUrl };
}
